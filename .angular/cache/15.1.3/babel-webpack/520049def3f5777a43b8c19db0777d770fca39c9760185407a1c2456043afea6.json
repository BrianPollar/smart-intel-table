{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Subject } from 'rxjs';\nexport class DataSource {\n  constructor() {\n    this.onChangedSource = new Subject();\n    this.onAddedSource = new Subject();\n    this.onUpdatedSource = new Subject();\n    this.onRemovedSource = new Subject();\n  }\n  refresh() {\n    this.emitOnChanged('refresh');\n  }\n  load(data) {\n    this.emitOnChanged('load');\n    return Promise.resolve();\n  }\n  onChanged() {\n    return this.onChangedSource.asObservable();\n  }\n  onAdded() {\n    return this.onAddedSource.asObservable();\n  }\n  onUpdated() {\n    return this.onUpdatedSource.asObservable();\n  }\n  onRemoved() {\n    return this.onRemovedSource.asObservable();\n  }\n  prepend(element) {\n    this.emitOnAdded(element);\n    this.emitOnChanged('prepend');\n    return Promise.resolve();\n  }\n  append(element) {\n    this.emitOnAdded(element);\n    this.emitOnChanged('append');\n    return Promise.resolve();\n  }\n  add(element) {\n    this.emitOnAdded(element);\n    this.emitOnChanged('add');\n    return Promise.resolve();\n  }\n  remove(element) {\n    this.emitOnRemoved(element);\n    this.emitOnChanged('remove');\n    return Promise.resolve();\n  }\n  update(element, values) {\n    this.emitOnUpdated(element);\n    this.emitOnChanged('update');\n    return Promise.resolve();\n  }\n  empty() {\n    this.emitOnChanged('empty');\n    return Promise.resolve();\n  }\n  setSort(conf, doEmit) {\n    if (doEmit) {\n      this.emitOnChanged('sort');\n    }\n  }\n  setFilter(conf, andOperator, doEmit) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n  addFilter(fieldConf, andOperator, doEmit) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n  setPaging(page, perPage, doEmit) {\n    if (doEmit) {\n      this.emitOnChanged('paging');\n    }\n  }\n  setPage(page, doEmit) {\n    if (doEmit) {\n      this.emitOnChanged('page');\n    }\n  }\n  emitOnRemoved(element) {\n    this.onRemovedSource.next(element);\n  }\n  emitOnUpdated(element) {\n    this.onUpdatedSource.next(element);\n  }\n  emitOnAdded(element) {\n    this.onAddedSource.next(element);\n  }\n  emitOnChanged(action) {\n    this.getElements().then(elements => this.onChangedSource.next({\n      action,\n      elements,\n      paging: this.getPaging(),\n      filter: this.getFilter(),\n      sort: this.getSort()\n    }));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
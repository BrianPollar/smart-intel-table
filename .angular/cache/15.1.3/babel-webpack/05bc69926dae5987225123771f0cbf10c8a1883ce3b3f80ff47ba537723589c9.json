{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport { SimpleChange, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DataSource } from './defines/data-source/data-source.define';\nimport { LocalDataSource } from './defines/data-source/local-data-source/local-data-source.define';\nimport { Grid } from './defines/grid.define';\nimport { deepExtend, getPageForRowIndex } from './defines/helpers.define';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./components/pager/pager.component\";\nimport * as i3 from \"./components/tbody/tbody.component\";\nimport * as i4 from \"./components/thead/thead.component\";\nfunction SmartIntelTableComponent_thead_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"thead\", 4);\n    i0.ɵɵlistener(\"create\", function SmartIntelTableComponent_thead_1_Template_thead_create_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.create.emit($event));\n    })(\"selectAllRows\", function SmartIntelTableComponent_thead_1_Template_thead_selectAllRows_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onSelectAllRows($event));\n    })(\"sort\", function SmartIntelTableComponent_thead_1_Template_thead_sort_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.sort($event));\n    })(\"filter\", function SmartIntelTableComponent_thead_1_Template_thead_filter_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.filter($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"grid\", ctx_r0.grid)(\"isAllSelected\", ctx_r0.isAllSelected)(\"source\", ctx_r0.source)(\"createConfirm\", ctx_r0.createConfirm);\n  }\n}\nfunction SmartIntelTableComponent_smart_intel_table_pager_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"smart-intel-table-pager\", 5);\n    i0.ɵɵlistener(\"changePage\", function SmartIntelTableComponent_smart_intel_table_pager_3_Template_smart_intel_table_pager_changePage_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.changePage($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"source\", ctx_r1.source)(\"perPageSelect\", ctx_r1.perPageSelect);\n  }\n}\nexport class SmartIntelTableComponent {\n  constructor() {\n    this.settings = {};\n    this.rowSelect = new EventEmitter();\n    this.rowDeselect = new EventEmitter();\n    this.userRowSelect = new EventEmitter();\n    this.delete = new EventEmitter();\n    this.edit = new EventEmitter();\n    this.create = new EventEmitter();\n    this.custom = new EventEmitter();\n    this.deleteConfirm = new EventEmitter();\n    this.editConfirm = new EventEmitter();\n    this.createConfirm = new EventEmitter();\n    this.rowHover = new EventEmitter();\n    this.defaultSettings = {\n      mode: 'inline',\n      selectMode: 'single',\n      /**\n       * Points to an element in all data\n       *\n       * when < 0 all lines must be deselected\n       */\n      selectedRowIndex: 0,\n      switchPageToSelectedRowPage: false,\n      hideHeader: false,\n      hideSubHeader: false,\n      actions: {\n        columnTitle: 'Actions',\n        add: true,\n        edit: true,\n        delete: true,\n        custom: [],\n        position: 'left' // left|right\n      },\n\n      filter: {\n        inputClass: ''\n      },\n      edit: {\n        inputClass: '',\n        editButtonContent: 'Edit',\n        saveButtonContent: 'Update',\n        cancelButtonContent: 'Cancel',\n        confirmSave: false\n      },\n      add: {\n        inputClass: '',\n        addButtonContent: 'Add New',\n        createButtonContent: 'Create',\n        cancelButtonContent: 'Cancel',\n        confirmCreate: false\n      },\n      delete: {\n        deleteButtonContent: 'Delete',\n        confirmDelete: false\n      },\n      attr: {\n        id: '',\n        class: ''\n      },\n      noDataMessage: 'No data found',\n      columns: {},\n      pager: {\n        display: true,\n        page: 1,\n        perPage: 10\n      },\n      rowClassFunction: () => ''\n    };\n    this.isAllSelected = false;\n    this.destroyed$ = new Subject();\n  }\n  ngOnChanges(changes) {\n    if (this.grid) {\n      if (changes.settings) {\n        this.grid.setSettings(this.prepareSettings());\n      }\n      if (changes.source) {\n        this.source = this.prepareSource();\n        this.grid.setSource(this.source);\n      }\n    } else {\n      this.initGrid();\n    }\n    this.tableId = this.grid.getSetting('attr.id');\n    this.tableClass = this.grid.getSetting('attr.class');\n    this.isHideHeader = this.grid.getSetting('hideHeader');\n    this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n    this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n  }\n  ngOnDestroy() {\n    this.destroyed$.next();\n  }\n  selectRow(index, switchPageToSelectedRowPage = this.grid.getSetting('switchPageToSelectedRowPage')) {\n    if (!this.grid) {\n      return;\n    }\n    this.grid.settings.selectedRowIndex = index;\n    if (this.isIndexOutOfRange(index)) {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n      return;\n    }\n    if (switchPageToSelectedRowPage) {\n      const source = this.source;\n      const paging = source.getPaging();\n      const page = getPageForRowIndex(index, paging.perPage);\n      index %= paging.perPage;\n      this.grid.settings.selectedRowIndex = index;\n      if (page !== paging.page) {\n        source.setPage(page);\n        return;\n      }\n    }\n    const row = this.grid.getRows()[index];\n    if (row) {\n      this.onSelectRow(row);\n    } else {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n    }\n  }\n  editRowSelect(row) {\n    if (this.grid.getSetting('selectMode') === 'multi') {\n      this.onMultipleSelectRow(row);\n    } else {\n      this.onSelectRow(row);\n    }\n  }\n  onUserSelectRow(row) {\n    if (this.grid.getSetting('selectMode') !== 'multi') {\n      this.grid.selectRow(row);\n      this.emitUserSelectRow(row);\n      this.emitSelectRow(row);\n    }\n  }\n  onRowHover(row) {\n    this.rowHover.emit(row);\n  }\n  multipleSelectRow(row) {\n    this.grid.multipleSelectRow(row);\n    this.emitUserSelectRow(row);\n    this.emitSelectRow(row);\n  }\n  onSelectAllRows($event) {\n    this.isAllSelected = !this.isAllSelected;\n    this.grid.selectAllRows(this.isAllSelected);\n    this.emitUserSelectRow(null);\n    this.emitSelectRow(null);\n  }\n  onSelectRow(row) {\n    this.grid.selectRow(row);\n    this.emitSelectRow(row);\n  }\n  onMultipleSelectRow(row) {\n    this.emitSelectRow(row);\n  }\n  initGrid() {\n    this.source = this.prepareSource();\n    this.grid = new Grid(this.source, this.prepareSettings());\n    this.subscribeToOnSelectRow();\n    this.subscribeToOnDeselectRow();\n  }\n  prepareSource() {\n    if (this.source instanceof DataSource) {\n      return this.source;\n    } else if (this.source instanceof Array) {\n      return new LocalDataSource(this.source);\n    }\n    return new LocalDataSource();\n  }\n  prepareSettings() {\n    return deepExtend({}, this.defaultSettings, this.settings);\n  }\n  changePage($event) {\n    this.resetAllSelector();\n  }\n  sort($event) {\n    this.resetAllSelector();\n  }\n  filter($event) {\n    this.resetAllSelector();\n  }\n  deselectAllRows() {\n    this.grid.dataSet.deselectAll();\n    this.emitDeselectRow(null);\n  }\n  resetAllSelector() {\n    this.isAllSelected = false;\n  }\n  emitUserSelectRow(row) {\n    const selectedRows = this.grid.getSelectedRows();\n    this.userRowSelect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n      selected: selectedRows && selectedRows.length ? selectedRows.map(r => r.getData()) : []\n    });\n  }\n  emitSelectRow(row) {\n    const data = {\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source\n    };\n    this.rowSelect.emit(data);\n    if (!row?.isSelected) {\n      this.rowDeselect.emit(data);\n    }\n  }\n  emitDeselectRow(row) {\n    this.rowDeselect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source\n    });\n  }\n  isIndexOutOfRange(index) {\n    const dataAmount = this.source?.count();\n    return index < 0 || typeof dataAmount === 'number' && index >= dataAmount;\n  }\n  subscribeToOnSelectRow() {\n    if (this.onSelectRowSubscription) {\n      this.onSelectRowSubscription.unsubscribe();\n    }\n    this.onSelectRowSubscription = this.grid.onSelectRow().pipe(takeUntil(this.destroyed$)).subscribe(row => {\n      this.emitSelectRow(row);\n    });\n  }\n  subscribeToOnDeselectRow() {\n    if (this.onDeselectRowSubscription) {\n      this.onDeselectRowSubscription.unsubscribe();\n    }\n    this.onDeselectRowSubscription = this.grid.onDeselectRow().pipe(takeUntil(this.destroyed$)).subscribe(row => {\n      this.emitDeselectRow(row);\n    });\n  }\n}\nSmartIntelTableComponent.ɵfac = function SmartIntelTableComponent_Factory(t) {\n  return new (t || SmartIntelTableComponent)();\n};\nSmartIntelTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SmartIntelTableComponent,\n  selectors: [[\"smart-intel-table\"]],\n  inputs: {\n    source: \"source\",\n    settings: \"settings\"\n  },\n  outputs: {\n    rowSelect: \"rowSelect\",\n    rowDeselect: \"rowDeselect\",\n    userRowSelect: \"userRowSelect\",\n    delete: \"delete\",\n    edit: \"edit\",\n    create: \"create\",\n    custom: \"custom\",\n    deleteConfirm: \"deleteConfirm\",\n    editConfirm: \"editConfirm\",\n    createConfirm: \"createConfirm\",\n    rowHover: \"rowHover\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 9,\n  consts: [[3, \"id\", \"ngClass\"], [\"smart-table-thead\", \"\", 3, \"grid\", \"isAllSelected\", \"source\", \"createConfirm\", \"create\", \"selectAllRows\", \"sort\", \"filter\", 4, \"ngIf\"], [\"smart-table-body\", \"\", 3, \"grid\", \"source\", \"deleteConfirm\", \"editConfirm\", \"rowClassFunction\", \"edit\", \"delete\", \"custom\", \"userSelectRow\", \"editRowSelect\", \"multipleSelectRow\", \"rowHover\"], [3, \"source\", \"perPageSelect\", \"changePage\", 4, \"ngIf\"], [\"smart-table-thead\", \"\", 3, \"grid\", \"isAllSelected\", \"source\", \"createConfirm\", \"create\", \"selectAllRows\", \"sort\", \"filter\"], [3, \"source\", \"perPageSelect\", \"changePage\"]],\n  template: function SmartIntelTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\", 0);\n      i0.ɵɵtemplate(1, SmartIntelTableComponent_thead_1_Template, 1, 4, \"thead\", 1);\n      i0.ɵɵelementStart(2, \"tbody\", 2);\n      i0.ɵɵlistener(\"edit\", function SmartIntelTableComponent_Template_tbody_edit_2_listener($event) {\n        return ctx.edit.emit($event);\n      })(\"delete\", function SmartIntelTableComponent_Template_tbody_delete_2_listener($event) {\n        return ctx.delete.emit($event);\n      })(\"custom\", function SmartIntelTableComponent_Template_tbody_custom_2_listener($event) {\n        return ctx.custom.emit($event);\n      })(\"userSelectRow\", function SmartIntelTableComponent_Template_tbody_userSelectRow_2_listener($event) {\n        return ctx.onUserSelectRow($event);\n      })(\"editRowSelect\", function SmartIntelTableComponent_Template_tbody_editRowSelect_2_listener($event) {\n        return ctx.editRowSelect($event);\n      })(\"multipleSelectRow\", function SmartIntelTableComponent_Template_tbody_multipleSelectRow_2_listener($event) {\n        return ctx.multipleSelectRow($event);\n      })(\"rowHover\", function SmartIntelTableComponent_Template_tbody_rowHover_2_listener($event) {\n        return ctx.onRowHover($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(3, SmartIntelTableComponent_smart_intel_table_pager_3_Template, 1, 2, \"smart-intel-table-pager\", 3);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.tableId)(\"ngClass\", ctx.tableClass);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isHideHeader || !ctx.isHideSubHeader);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"grid\", ctx.grid)(\"source\", ctx.source)(\"deleteConfirm\", ctx.deleteConfirm)(\"editConfirm\", ctx.editConfirm)(\"rowClassFunction\", ctx.rowClassFunction);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isPagerDisplay);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i2.PagerComponent, i3.Ng2SmartTableTbodyComponent, i4.Ng2SmartTableTheadComponent],\n  styles: [\"[_nghost-%COMP%]{font-size:1rem}[_nghost-%COMP%]     *{box-sizing:border-box}[_nghost-%COMP%]     button, [_nghost-%COMP%]     input, [_nghost-%COMP%]     optgroup, [_nghost-%COMP%]     select, [_nghost-%COMP%]     textarea{color:inherit;font:inherit;margin:0}[_nghost-%COMP%]     table{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;width:100%;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all}[_nghost-%COMP%]     table tr th{font-weight:700}[_nghost-%COMP%]     table tr section{font-size:.75em;font-weight:700}[_nghost-%COMP%]     table tr td, [_nghost-%COMP%]     table tr th{font-size:.875em;margin:0;padding:.5em 1em}[_nghost-%COMP%]     a{color:#1e6bb8;text-decoration:none}[_nghost-%COMP%]     a:hover{text-decoration:underline}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
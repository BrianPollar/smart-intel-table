{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class ResizeColumnDirective {\n  constructor(el, renderer) {\n    this.el = el;\n    this.renderer = renderer;\n    this.onMouseDown = event => {\n      this.pressed = true;\n      this.startX = event.pageX;\n      this.startWidth = this.column.offsetWidth;\n    };\n    this.onMouseMove = event => {\n      const offset = 35;\n      if (this.pressed && event.buttons) {\n        this.renderer.addClass(this.table, 'resizing');\n        // Calculate width of column\n        const width = this.startWidth - (event.pageX - this.startX - offset);\n        /** const tableCells = Array\n          .from(this.table.querySelectorAll('.smart-table-row'))\n          .map((row: any) => row.querySelectorAll('.mat-cell')\n            .item(this.index));**/\n        const tableCells = Array.from(this.table.querySelectorAll('.smart-table-row')).map(row => row.getElementsByTagName('td').item(this.index));\n        // Set table header width\n        this.renderer.setStyle(this.column, 'width', `${width}px`);\n        // Set table cells width\n        for (const cell of tableCells) {\n          this.renderer.setStyle(cell, 'width', `${width}px`);\n        }\n      }\n    };\n    this.tableHover = event => {\n      if (this.heightMade) {\n        // return;\n      }\n      this.heightMade = true;\n      if (this.resizer && this.renderer) {\n        this.renderer.setStyle(this.resizer, 'height', `${this.getTableHeight()}px`);\n      }\n    };\n    this.onMouseUp = event => {\n      if (this.pressed) {\n        this.pressed = false;\n        this.renderer.removeClass(this.table, 'resizing');\n      }\n    };\n    this.column = this.el.nativeElement;\n  }\n  ngOnInit() {\n    if (this.resizable) {\n      /** const row = this.renderer.parentNode(this.column);\n      const thead = this.renderer.parentNode(row);\n      this.table = this.renderer.parentNode(thead);*/\n      const row = this.renderer.parentNode(this.column);\n      const thead = this.renderer.parentNode(row);\n      this.table = this.renderer.parentNode(thead);\n      // we will add this element as a marker for triggering resize.\n      this.resizer = this.renderer.createElement('div');\n      this.renderer.addClass(this.resizer, 'resize-holder');\n      this.renderer.appendChild(this.column, this.resizer);\n      this.renderer.addClass(this.column, 'disp-flex');\n      this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown);\n      this.renderer.listen(this.table, 'mousemove', this.onMouseMove);\n      this.renderer.listen('document', 'mouseup', this.onMouseUp);\n      this.renderer.listen(this.table, 'mouseover', this.tableHover);\n    }\n  }\n  getTableHeight() {\n    return this.table.clientHeight;\n  }\n}\nResizeColumnDirective.ɵfac = function ResizeColumnDirective_Factory(t) {\n  return new (t || ResizeColumnDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nResizeColumnDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: ResizeColumnDirective,\n  selectors: [[\"\", \"smartResizeColumn\", \"\"]],\n  inputs: {\n    resizable: [\"smartResizeColumn\", \"resizable\"],\n    index: \"index\"\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}